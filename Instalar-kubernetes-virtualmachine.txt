Paso 1: Instalación del paquete
Instalamos los paquetes necesarios en todas las máquinas para visualizar el plano de control, que son:

kubeadm
kubectl
kubelet
docker
Note: Instalar la última versión estable, verifica en internet
$ apt install docker
$ sudo -i
$ echo 'deb http://apt.kubernetes.io/ kubernetes-xenial main' > /etc/apt/sources.list.d/kubernetes.list
$ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
$ apt update -y
$ apt-get install -y kubeadm kubectl kubelet
$ apt-mark hold kubeadm kubelet kubectl
$ kubeadm version

Step 2: Instalación

Es importante que desactivemos la swap

sudo swapoff -a
sudo sed -i '/ swap / s/^/#/' /etc/fstab
sudo hostnamectl set-hostname master-node
Ahora deberíamos tener las tres máquinas listas para instalar Kubernetes.


Y despues ejectuar las siguientes instrucciones:

$ kubeadm init --pod-network-cidr 192.168.0.0/16
Nos va a devolver este comando al ser ejecutado en los nodos workers al conectarse al cluster

$ kubeadm join 10.132.0.54:6443 --token fst6wr.9u5ge36gpdc3skdw --discovery-token-ca-cert-hash sha256:5355aee5c476e878cc63403635c0175b0d4caa39e7f3d5f027e46caa8141c9c2
Ejecutamos el comando anterior en ambos nodos y ya tendríamos el clúster de Kubernetes. Pero todavía tienes que hacer un par de cosas más para que sea completamente funcional.

Paso 3: Configurando Kubelet

Kubelet necesita el archivo de configuración del clúster para realizar llamadas al punto final correcto; Hay que esperar que ese archivo esté en el directorio ~ / .kube / y nombrarlo config:

$ mkdir ~/.kube
$ cp /etc/kubernetes/admin.conf ~/.kube/config
Paso 4: Instalación de la red local

Al final instalamos la red interna de Kubernetes para los pods. Hay varias opciones. Usaremos «Calico» (https://docs.projectcalico.org)


Instalar cube-flannel:

$ sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml


# kubectl get nodes
NAMESTATUSROLESAGEVERSION
v-1-17-masterReadymaster19mv1.17.2
v-1-17-worker-1Readyworker17mv1.17.2
v-1-17-worker-2Readyworker17mv1.17.2

Opcional:

Instalar calico
$ kubectl create -f https://docs.projectcalico.org/v3.9/manifests/calico.yaml

¿Puedo migrar mi plataforma a Kubernetes?
Uno de los mayores obstáculos para una aplicación que se ejecuta en Kubernetes es la migración. La mayoría de los usuarios piensan que su aplicación no es adecuada para ejecutarse en Kubernetes porque no es una arquitectura de microservicios. Y aunque una aplicación monolítica no se puede convertir en microservicios sin modificar el código, es posible migrarla a Kubernetes.
